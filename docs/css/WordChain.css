/*
************************************
** Default styling for Mobile Phones
************************************
*/

/*
** ===============
** Global Settings
** ===============
*/

/*
** These colors are defined for :root to enable implementation of both
** dark and colorblind mode. We define properties for "good" and "bad"
** indications for both light and dark themes. We also define both
** dark and light variants for the colors used for any properties
** that are affected by dark and light mode. All of these colors will
** be used in the javascript code to effect theme and colorblind changes.
** See AppDisplay.setColors().
*/
:root {

    /*
    ** Light Mode Colors
    */

    /* ===== Cells ===== */
    --colorblind-good-bg-light:         #5f99e4;    /* blue */
    --colorblind-bad-bg-light:          #ff9200;    /* orange */
    --colorblind-genius-bg-light:       #f0ce15;    /* gold */
    --colorblind-dodo-bg-light:         #ff9200;    /* orange; was brownish */
    --colorblind-shown-bg-light:        #9c9ea0;    /* gray */
    --non-colorblind-good-bg-light:     #85daac;    /* green */
    --non-colorblind-bad-bg-light:      #f87474;    /* red */
    --non-colorblind-genius-bg-light:   #f0ce15;    /* gold */
    --non-colorblind-dodo-bg-light:     #f87474;    /* red; was brownish */
    --non-colorblind-shown-bg-light:    #9c9ea0;    /* gray */

    /*
    ** Dark Mode Colors
    */

    /* ===== Cells ===== */
    --colorblind-good-bg-dark:          #2d7be1;    /* blue */
    --colorblind-bad-bg-dark:           #d58b04;    /* orange */
    --colorblind-genius-bg-dark:        #f0ce15;    /* gold */
    --colorblind-dodo-bg-dark :         #d58b04;    /* orange; was brownish */
    --colorblind-shown-bg-dark:         #9c9ea0;    /* gray */
    --non-colorblind-good-bg-dark:      #28c128;    /* green */
    --non-colorblind-bad-bg-dark:       #d33433;    /* red */
    --non-colorblind-genius-bg-dark:    #f0ce15;    /* gold */
    --non-colorblind-dodo-bg-dark :     #d33433;    /* red; was brownish */
    --non-colorblind-shown-bg-dark:     #9c9ea0;    /* gray */
}

/*
** These colors don't change for dark/light OR colorblind/non-colorblind.
*/
:root {
    /* ===== Stats ===== */
    --stats-bar-bg:             Gray;
    --stats-bar-fg:             White;

    /* ===== Game Play ===== */
    --confirmation-bg:          LightGray;
}

/*
** Light/dark settings that are NOT affected by colorblind mode are enabled by
** setting adding light-mode or dark-mode to the document element class.
*/
:root,
:root.light-mode {
    /* ===== Basic Colors===== */
    --primary-fg:               Black;
    --secondary-fg:             White;
    --primary-bg:               White;
    --secondary-bg:             Black;
    --user-input-fg:            Black;
    --user-input-bg:            #ffff00;    /* yellow */

    /* ===== Header and Buttons ===== */
    --header-bg:                #97b2d5;    /* slate blue */
    --button-fg-disabled:       #9c9ea0;    /* lightish gray */
    --button-bg:                LightGray;

    /* ===== Cells, Letters, Buttons ===== */
    --cell-border:              var(--primary-fg);
    --target-word-bg:           #d09ade;    /* pale purple */

    /* ===== Toast ===== */
    --toast-bg:                 var(--secondary-bg);
    --toast-fg:                 var(--secondary-fg);

    /* ===== Settings/Links ===== */
    --setting-separator:        LightGray;
    --setting-description-fg:   Gray;
    --link-fg:                  Blue;
    --visited-link-fg:          Purple;
}

:root.dark-mode {
    /* ===== Basic Colors===== */
    --primary-fg:               White;
    --secondary-fg:             Black;
    --primary-bg:               #1d1d1f;    /* very dark blueish gray */
    --secondary-bg:             White;
    --user-input-fg:            White;
    --user-input-bg:            #c6c60d;    /* mustard-y yellow */

    /* ===== Header and Buttons ===== */
    --header-bg:                Black;
    --button-fg-disabled:       #7f7b7b;    /* darkish gray */
    --button-bg:                #49515a;    /* dark blueish gray */

    /* ===== Cells, Letters, Buttons ===== */
    --cell-border:              White;
    --target-word-bg:           #b319ff;    /* medium purple */

    /* ===== Toast ===== */
    --toast-bg:                 var(--secondary-bg);
    --toast-fg:                 var(--secondary-fg);

    /* ===== Settings/Links ===== */
    --setting-separator:        Gray;
    --setting-description-fg:   Gray;
    --link-fg:                  #5b6ef0;    /* light blue */
    --visited-link-fg:          #9b5bf0;    /* light purple */
}

/*
** Sizing constants.
*/
:root {
    --cell-size: 25px;
    --action-cell-size: 15px;
    --cell-margin: 4px;
    --picker-font-size: 2rem;
}

/*
** IMPORTANT!!!
** No color names or color numbers should be used below this point!
** Only use references to properties defined above.
*/

/*
** Same font for everyone.
*/
* {
    font-family: 'Clear Sans', 'Helvetica Neue', Arial, sans-serif;
}

/*
** Settings for the outermost HTML elements.
*/
html, body {
    /* vh means "viewport height" -- this says to make the body take 100% of the viewport height. */
    height: 100vh;
    margin: 0px;
    background: var(--primary-bg);
}

hr {
    /* Need to set this for when it is within a "display: flex" else it doesn't show up. */
    width: 100%;
}

/*
** This class is used in divs with display: flex to force whatever comes
** after the div to be on a "new line".
** See: https://tobiasahlin.com/blog/flexbox-break-to-new-row
*/
.break {
    flex-basis: 100%;
}

/*
** The top-level application div.
*/
#root-div {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    background: var(--primary-bg);
    /*
    ** If we have height: 100% here, the header is only sticky to a point in
    ** landscape mode -- it seams to cause root-dive to have a fixed height
    ** that is shorter than its contents! This causes scrolling to be funky,
    ** but only in landscape mode. Go figure.
    */
    width: 100%;
}

/*
** The copyright at the bottom of the game and auxiliary screens,
** contained in root-div.
*/
#copyright-div {
    font-size: .75rem;
    margin-top: 20px;
    text-align: center;
    color: var(--primary-fg);
    background: var(--background-fg);
}

/*
** ===========
** Game screen
** ===========
*/

/* This holds the WordChain banner and the letter picker, contained in root-div. */
#upper-div {
    flex-direction: column;
    justify-content: center;
    position: sticky;
    top: 0px;
}

/* This holds the mama-game-div, contained in root-div */
#lower-div {
    display: flex;
    /*
    ** For some reason, if we have "flex-direction: column;" here (and remove "flex-wrap: wrap;"),
    ** it messes up the scrolling of games that no longer fit on the screen -- scrolling up as
    ** far as possible cuts off the top row(s) of cells. If we have both settings, that messes up the
    ** display and the picker is to the right of the game cells, even with the "break div".
    ** So we shouldn't change these settings because the scrolling works just right now!
    */
    flex-wrap: wrap;
    justify-content: center;
    width: 100%;
}

/* This holds daily/practice-game-div -- these are hidden/shown when the Practic/Daily button is clicked. */
#mama-game-div {
}

/* Styling for mama/practice/daily-game-div. */
.game-div {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    overflow-x: hidden;
}

/*
** -----------------------------
** Header (the WordChain banner)
** -----------------------------
*/

#header-div {
    flex-wrap: wrap;
    flex-shrink: 0;
    align-items: center;
    height: 50px;
    display: flex;
    background: var(--header-bg);
    padding-top: 10px;
    padding-bottom: 10px;
}

#game-button-div {
    width: 30%;
    display: flex;
    justify-content: flex-start;
    align-items: center;
}

#title-div {
    width: 40%;
    display: flex;
    justify-content: center;
    align-items: center;
}

.title {
    font-size: 1.3rem;
    font-weight: bold;
    color: var(--primary-fg);
}

#auxiliary-button-div {
    width: 30%;
    display: flex;
    justify-content: flex-end;
    align-items: center;
}

/*
** ----------------------
** General Button Styling
** ----------------------
*/

.app-button {
    font-size: .70rem;
    padding: .3rem;
    margin: .2rem;
    border-width: 0;
    border-radius: .5rem;
    color: var(--primary-fg);
    color: var(--primary-fg);
}

.app-button:focus {
    outline: none;
}

.header-button {
    font-weight: bold;
    background: var(--button-bg);
}

/* Buttons for help, stats, settings in the header */
.aux-button {
    background: var(--button-bg);
    border-radius: 50%;
    border-width: 0;
    padding: .15rem;
    margin: .2rem;
}

/* Holds images for help, stats, settings in the header */
svg {
    display: block;
    margin: auto;
    fill: var(--primary-fg);
}

.non-header-button {
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--primary-fg);
    background: var(--button-bg);
}

button:disabled {
    color: var(--button-fg-disabled) !important;
}

button:enabled {
    color: var(--primary-fg) !important;
}

/* For confirmation mode */
.button-unselected {
    background: var(--user-input-bg) !important;
}

/* For confirmation mode */
.button-unconfirmed {
    background: var(--confirmation-bg) !important;
}

/*
** ----------------------------------------
** Cell Grid, Cells, Buttons Below the Grid
** ----------------------------------------
*/

.game-grid-div {
}

.table-div {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
}

.table-game {
    border-spacing: .0rem;
}

.tr-game {
    /*
    ** Using block here makes the cells in the grid line up better.
    ** The default display inexplicably puts a little extra space
    ** between letters sometimes. Note that the display is still not
    ** perfect looking because we are not accounting for the extra pixels
    ** when letter outlines are bolded to indicate they will change.
    */
    display: block;
}

.td-game-active {
    background: var(--user-input-bg);
}

.td-game {
    padding-top: 7px;
    padding-bottom: 7px;
}

.circle {
    border: solid;
    border-color: var(--cell-border);
    border-radius: 50%;   /* Makes the div a circle */
    padding: 0px;
}

/*
** This style is used with letter-outer-cell and action-outer-cell
** to ensure that the deletion line up properly under their corresponding
** letters. Having the same width, border-width, and margins is the key!
*/
.outer-cell {
    width: var(--cell-size);
    border-width: .25rem !important;
    margin-right: var(--cell-margin);
    margin-left: var(--cell-margin);
    display: flex;
    align-items: center;
    justify-content: center;
}

/*
** This cell's border is invisible when the letter is not one that should be changed
** and visible when it should be changed. By having the transparent border in the
** non-change case we ensure that the cells line up properly in the grid.
** This class must be used along with class outer-cell.
*/
.letter-outer-cell {
    border-color: transparent;
}

/*
** This (inner) cell is what changes color when the user guesses words.
*/
.letter-cell {
    width: var(--cell-size);
    height: var(--cell-size);
    border-width: .1rem;
    display: flex;
    align-items: center;
    justify-content: center;
}

/*
** The played-word*bg properties are set in AppDisplay.js to the appropriate
** dark mode and colorblind properties.
*/

.letter-cell-good {
    background: var(--played-word-good-bg);
}

.letter-cell-bad {
    background: var(--played-word-bad-bg);
}

.letter-cell-genius {
    background: var(--played-word-genius-bg);
}

.letter-cell-dodo {
    background: var(--played-word-dodo-bg);
}

.letter-cell-shown {
    background: var(--played-word-shown-bg);
}

/*
** Used with letter-outer-cell.
*/
.letter-cell-change {
    border-color: var(--cell-border);
}

.letter-cell-future {
}

/*
** Used with letter-outer-cell.
*/
.letter-cell-future-change {
    border-color: var(--cell-border);
}

.letter-cell-played {
}

.letter-cell-start,
.letter-cell-target {
    background: var(--target-word-bg);
}

.letter {
    font-weight: bold;
}

button.action-button {
    border: none;
    color: var(--user-input-fg); /* text color */
    background: transparent;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    padding-bottom: 2px;
    /*
    ** This turns off double-tap zooming on iPad -- thank ja!
    ** Unlike with the picker setting, here we can use value
    ** none because we don't need/want any scrolling.
    */
    touch-action: none;
}

/*
** This class must be used along with class outer-cell.
*/
.action-outer-cell {
    height: var(--action-cell-size);
    border-color: transparent;
}

.action-cell {
    width: var(--action-cell-size);
    height: var(--action-cell-size);
    color: var(--user-input-fg);
    border: solid;
    border-width: .1rem;
    border-color: var(--cell-border);
    display: flex;
    align-items: center;
    justify-content: center;
}

.action-cell-addition {
}

.action-cell-addition-first {
    margin-left: 6px !important;
}

.action-cell-addition-last {
    margin-right: 6px !important;
}

.action-cell-deletion {
}

.action {
    font-weight: bold;
}

/* Container for any buttons (or perhaps other stuff) right below the game grid. */
.post-game-div {
    display: flex;
    align-items: center;
    justify-content: center;
}

/*
** ------------
** Game results
** ------------
*/

/* This div has the score, original solution, and icon divs. */
.results-div {
    color: var(--primary-fg);
    background: var(--background-fg);
}

.score-div {
    display:flex;
    align-items: center;
    justify-content: center;
    padding-top: 10px;
}

.score-label {
    border: solid;
    border-width: .1rem;
    padding: 6px;
    font-weight: bold;
}

.original-solution-div {
    display: flex;
    width: 100%;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.original-solution-label {
    padding-top: 30px;
    padding-left: 10px;
}

.icon-div {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: 25px;
}

.word-chain-icon {
    width: 80px;
    height: 80px;
    margin-right: 15px;
}

.icon-label {
    font-style: italic;
}

/*
** -------------
** Letter Picker
** -------------
*/

/*
** This is the overall picker div, which contains the picker outer div
** for the daily and practice games.
*/
#picker-div {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background: var(--primary-bg);
    width: 100%;
    padding-top: 10px;
    padding-bottom: 10px;
}

/*
** The classes below apply to both the daily and practice games pickers,
** i.e. each of the pickers has a div with class picker-outer-div and
** a div with class picker-inner-div.
*/

.picker-outer-div {
    /*
    ** Width should result in a bit of space around the picker.
    */
    width: 325px;
    /*
    ** It is essential to have a height here, or else the picker space
    ** will go away when picker-inner-div is hidden! Leave just enough
    ** for the scroll bar to look OK.
    */
    height: 55px;
}

.picker-inner-div {
    width: 100%;
    overflow: auto;
}

.picker-table {
}

.picker-tr {
}

.picker-td {
}

.picker-button {
    width: 50px;
    height: 50px;
    border: 1px solid black;
    border-radius: 25%;
    padding-left: 10px;
    padding-right: 10px;
    margin-right: 2px;
    margin-bottom: 8px;
    font-size: var(--picker-font-size);
    font-weight: bold;
    background: var(--user-input-bg);
    color: var(--user-input-fg);
    /*
    ** This turns off double-tap zooming on iPad. Note that setting this
    ** to 'none' interferes with the ability to scroll the picker.
    */
    touch-action: pan-x;
}

/*
** =========================================
** Auxiliary Screens (Help, Settings, Stats)
** =========================================
*/

.auxiliary-div {
    display: flex;
    align-items: center;
    justify-content: center;
}

.auxiliary-container-div {
    width: 100%;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
}

.auxiliary-content-div {
    width: 100%;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    color: var(--primary-fg);
    margin: 1.5rem;
}

.auxiliary-content-div h1 {
    font-size: 1.5rem;
    font-weight: bold;
}
.auxiliary-content-div h2 {
    font-size: 1.25rem;
    font-weight: bold;
}
.auxiliary-content-div h3 {
    font-size: 1rem;
    font-weight: bold;
}
.auxiliary-content-div p {
    font-size: 1rem;
}

.close-button-div {
    width: 100%;
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-end;
}

.close-button {
    background: transparent;
    border-width: 0;
}

/*
** ----
** Help
** ----
*/

.help-content-container {
}

/*
** --------
** Settings
** --------
*/

.settings-content-container {
    display: block;
}

.setting-simple {
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid var(--setting-separator);
    padding-top: 1rem;
    padding-bottom: 1rem;
}

.setting-text {
    padding-right: 2rem;
}

.setting-title {
    font-size: 1rem;
    font-weight: bold;
}

.setting-description {
    font-size: .8rem;
    color: var(--setting-description-fg);
}

input.setting-checkbox {
    width: 1.25rem;
    height: 1.25rem;
}

a:link {
    color: var(--link-fg);
}

a:link {
    color: var(--visited-link-fg);
}

.setting-complex {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    border-bottom: 1px solid var(--setting-separator);
    padding-top: 1rem;
    padding-bottom: 1rem;
}

#setting-radio-tr {
    padding-bottom: .5rem;
}

input.setting-radio {
    width: 1rem;
    height: 1rem;
    margin-right: .5rem;
}

.radio-container {
    margin-top: 1rem;
    /* First value sets horizontal spacing; second one sets vertical. */
    border-spacing: .4rem .2rem;
}

.radio-label {
    font-size: 1rem;
}

/*
** -----
** Stats
** -----
*/

.stats-content-container {
    display: flex;
}

.stats-content-div {
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

/* This holds the group of stats at the top */
.stats-container-div {
    display: flex;
    flex-direction: row;
    justify-content: center;
}

.one-stat {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: .5rem;
}

.one-stat-value {
    font-size: 2rem;
}

.one-stat-label {
    font-size: .75rem;
}

/* This holds the distribution graph */
.distribution-div {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
}

.one-bar {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    width: 20rem;
    margin-bottom: .5rem;
}

.one-bar-label {
    margin-right: .5rem;
}

.one-bar-bar {
    background: var(--stats-bar-bg);
    display: flex;
    flex-direction: row;
    justify-content: flex-end;
    align-items: center;
}

.one-bar-value {
    color: var(--stats-bar-fg);
    font-weight: bold;
    margin-right: .5rem;
}

/* This holds the countdown clock */
.countdown-div {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.countdown-clock {
    background: var(--primary-bg);
    color: var(--primary-fg);
    font-size: 4rem;
    padding: .5rem;
}

/* This holds the buttons */
.stats-button-div {
    display: flex;
    flex-direction: column;
    align-items: center;
}

/*
** =============
** Toast Pop-ups
** =============
*/

.pop-up {
    visibility: hidden;
    font-size: 1rem;
    background: var(--toast-bg);
    color: var(--toast-fg);
    text-align: center;
    border-radius: .5rem;
    padding: .75rem;
    min-width: 14rem;           /* Set a default minimum width */
    margin-left: -7rem;         /* Divide value of min-width by 2 */
    position: fixed;            /* Sit on top of the screen */
    top: 10rem;                 /* 10rem from the top */
    left: 50%;                  /* Center the toast */
}

#toast-div.show {
  visibility: visible;
  /*
  ** Add animation: Take 0.5 seconds to fade in and out the toast.
  ** However, delay the fade out process for 2.5 seconds.
  */
  animation: fadein 0.5s, fadeout 0.5s 2.5s;
}

#cannot-load-div.show {
  visibility: visible;
  animation: fadein 0.5s;
}

@keyframes fadein {
    from {
        top: 0;
        opacity: 0;
    }
    to {
        top: 10rem;
        opacity: 1;
    }
}

@keyframes fadeout {
    from {
        top: 10rem;
        opacity: 1;
    }
    to {
        top: 0;
        opacity: 0;
    }
}


/*
** =======
** Test.js
** =======
*/

.testButton {
    margin: .5rem;
}


/*
*******************
** Override Styling
*******************
*/

/*
** ======
** Phones
** ======
*/

/*
** Changes to address clipping issue on Samsumg or other devices that are narrower
** than our iPhones.
**
**     iPhone 14 pro: viewport width 393 px.
**     Galaxy S21: viewport width 360 px.
*/
@media only screen and (width < 390px) {
    :root {
        --cell-size: 22px;
        --action-cell-size: 13px;
        --cell-margin: 3px;
    }

    .game-div {
        margin-left: 25px;

        /* Allow horizontal scrolling just in case things widen past Samsung viewport. */
        overflow-x: auto;
    }
}

/*
** ========================================
** Medium screens like tablets (and larger)
** ========================================
*/

@media only screen and (width > 450px) {
    table {
        border-spacing: .9rem;
    }

    button.action-button {
        padding-bottom: 4px;
    }

    .picker-outer-div {
        /*
        ** A little wider on larger screens so we can get 5-6 buttons in the picker.
        */
        width: 400px;
        /*
        ** Much taller on larger screens so when you narrow it, the game grid doesn't
        ** obstruct the picker.
        */
        height: 110px;
    }
}

@media only screen and (min-width: 600px) {
    table {
        border-spacing: .7rem;
    }

    .title {
        font-size: 2rem;
    }

    .aux-button {
        padding: .35rem;
        margin: .5rem;
    }

    .app-button {
        padding: .3rem;
        margin: .5rem;
    }

    /*
    ** Make the button font larger on larger screens, but at around 670px,
    ** the size needs be smaller so that the "Switch to" buttons don't wrap.
    */
    @media (width <= 670px) {
        .app-button {
            font-size: 1.0rem;
        }
    }

    @media (width > 670px) {
        .app-button {
            font-size: 1.25rem;
        }
    }

    :root {
        --cell-size: 35px;
        --action-cell-size: 20px;
    }

    .letter-cell {
        font-size: 1.5rem;
    }
}

/*
** ===================================================
** Larger screens like laptop/desktop and some tablets
** ===================================================
*/

/*
** Adjust width of auxiliary screen content so that lines are not too long
** when the browser window is stretched wide and not too short when narrow.
*/
@media only screen and (width <= 1000px) {
    .auxiliary-content-div {
        width: 90%;
    }
}

@media only screen and (width > 1000px) and (width <= 1300px) {
    .auxiliary-content-div {
        width: 70%;
    }
}

@media only screen and (width > 1300px) {
    .auxiliary-content-div {
        width: 50%;
    }
}


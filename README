How to run locally

Start web server:

    cd /Users/bonnie/Projects/
    python3 wordchain/python/simple-https-server.py

Navigate in Chrome or Safari to:

    https://localhost/wordchain/docs/html/WordChain.html
    https://localhost/wordchain/docs/html/Test.html

=======================================================

How to run at github pages

After each push, github will republish the repo.  The game and tests are 
available at

https://bprokopowicz.github.io/wordchain/docs/html/WordChain.html
https://bprokopowicz.github.io/wordchain/docs/html/Test.html

You will need to enable pop-ups from that site.  Chrome will ask you on the first attempt.

======================================================

How to deploy and run a bundled version

At the top of the repo (wordchain directory):
npm install

   - This will read package.json, and add any packages found there to the local directory
     node_modules if they aren't already there.
   - It will also update package-lock.json, if anything changed in node_modules compared
     to what was there.
   - Note: node_modules is NOT in the repo, but package.json and package-lock.json are.  

webpack --mode development

   - This will read webpack.config.js in the repo.
   - This file defines the input (top-level JavaScript file for us), output file name,
     and plug-in transformations (obfuscator)
   - Currently creates 2 bundles wordchain/dist/main-bundled.js, wordchain/dist/test-bundled.js.

Similar to above, navigate in Chrome or Safari to:

    https://localhost/wordchain/docs/html/WordChainBundled.html
    https://localhost/wordchain/docs/html/TestBundled.html

=======================================================

Source code control (github)

I created the url
git@github.com:bprokopowicz/wordchain.git

looks like to access it via command line we need github's CLI called gh

brew install gh

then authorize your shell session with
gh auth login -w

USE HTTPS
To switch between 'prokopowicz' and 'bprokopowicz' github accounts
login to the one we want in the browser, then run gh auth login -w

GitHub config:
/Users/bonnie/.config/gh/hosts.yml - should have github user in it.


To get ssh key into github:
cat ~/.ssh/id_rsa.pub | pbcopy

git remote remove origin
git remote add origin git@github.com:bprokopowicz/wordchain.git
git remote -v (to list)

git push --set-upstream origin master

=======================================================

TESTING - How to run the browser-based tests:

    - Disable logging (Const.GL_DEBUG) in Const.js for initial testing.  If Const.GL_DEBUG is true, the tests take much longer to run, even
      if the Debug local-storage-key is not set.  You may need to edit Test.js to limit which tests will run if you're going to
      run them with logging enabled.

    - Start the local web server as described above, or you can test against the github pages deployed site.

    - Navigate in browser (local or remote) to:

        https://localhost/wordchain/docs/html/Test.html   (browser running locally)
        https://ip-addr/wordchain/docs/html/Test.html   (browser running remotely from server; e.g. on your phone)
        https://bprokopowicz.github.io/wordchain/docs/html/Test.html (code hosted at github pages)

        You may be warned about opening an unsafe site.  This is because our https certificate is not official.
        You need to read the warning and allow access.  Chrome and safari have different screens for doing this.

    - Optional: Open the browser's javascript console.  Chrome: Option-Command-I.  Navigator: Option-Command-C

    - click on "Run All Tests"
        You may be warned by the browser about pop-ups.  You need to allow them and re-run the tests.

    - The tests will produce logging if you set the Debug local-storage key's value to include the label: test
         The test logging doesn't use Const.GL_DEBUG to enable itself.  It is always on if the Debug local-storage key's
         value includes test.

TROUBLESHOOTING
    - Enable logging with Const.GL_DEBUG = true;
    - Each js file uses the logDebug(msg, tag) feature to log progress.  The Debug local-storage key is a comma-separated list of tags; for example:
      game,picker,callback,solver,dictionary-details,test
      or
      all (to see all debugging output)
      Set the Debug key's value in the browser (Application/Storage/Local storage/https://localhost tab in Chrome's dev tool window).
    - The pop-up windows have their own console.  You can view them in Chrome by clicking on the window and typing Option-Command-I
      If the windows disappear before you can see their console, you need to edit the particular app test and comment out "this.runNextTest()" in the test
      you want to pause with the window open.


GOOGLE DOCS

    - Testing How-To:    https://docs.google.com/document/d/1b8b2sDs3SFpffsEPO70uufia7UOJBccSUclHI4u9u8Y/edit?usp=sharing
    - Testing Use Cases: https://docs.google.com/document/d/10OhXfsQWpEvvLodChFl1e-K8VdjBBmx7-jTihKBI1sE/edit?usp=sharing

USE CASES FOR CREATING/UPDATING DAILY GAME

scenario              recovered  prior   calculated game     create        persistence
                      game       game    game       state    game?         update

ON FIRST PLAY no state
a normal 1st         none       uninit   N=0-30    clear    yes new       game number, incr games played
b broken 1st         none       uninit   N=BROKEN  clear    yes broken    game number

ON APP RESTART game state exists but prior game in progress in the app
c recovered older    R~=N       uninit   N=0-30    clear    yes new       game number, incr games played
d recovered older,   R~=N       uninit   N=BROKEN  clear    yes broken    unnecessary
now broken
e recovered active   R=N        uninit   N=0-30    recover  yes in prog   unnecessary
f recovered broken   R=N        uninit   N=BROKEN  recover  yes in prog   unnecessary

DURING PLAY prior game in progress in the the app exists
g continuing         R=N        P=N      N=0-30    ignore   no            unnecessary
h continuing broken  R=N        P=BROKEN N=BROKEN  ignore   no            unnecessary
i rollover new day   R~=N       P~=N     N=0-30    clear    yes new       game number, incr games played
j rollover to broken R~=N       P~=N     N=BROKEN  clear    yes broken    game number

by action
clear state, create new game    a,c,i            R~=N
clear state, create broken game b,d,j            R~=N, N=BROKEN
recover game in prog e, f (normal and broken)    R=N, P=uninit
nothing - game on-going g, h (normal and broken) R=N, P=R=N



